<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access/>
        <active>true</active>
        <api_name>x_appsanerrors.SecurityAuditor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Runs an audit of Contextual Security ACL's for specified Users / Roles / ESS of a specified table and/or table and fields</description>
        <name>SecurityAuditor</name>
        <script><![CDATA[var SecurityAuditor = Class.create();

SecurityAuditor.prototype = {
   initialize : function(set) {
      this.set = set;
      this.ess = set.ess;
      this.roles = set.roles.split(',');
      this.users = set.users.split(',');
      this.canRead = "";
      this.canWrite = "";
      this.canCreate = "";
      this.canDelete = "";
      
      if (this.ess || this.roles)
         this._auditRoles();
      
      if (this.users)
         this._auditUsers();
      
      set.state = 3;
      set.update();
   },
   
   _auditRoles : function() {
      // Create a temp gsft.security.audit user to verify roles
      var usr = new GlideRecord('sys_user');
      if (!usr.get('user_name', 'gsft.security.audit')) {
         usr.user_name = 'gsft.security.audit';
         usr.setWorkflow(false);
         usr.insert();
      }
      
      if (this.ess)
         this._audit(usr.sys_id, '', false);
      
      if (this.roles) {
         for (var i = 0; i < this.roles.length; i++)
            this._audit(usr.sys_id, this.roles[i], false);
      }
      
      // Remove the temp gsft.security.audit user on the way out	
      var delUsr = new GlideRecord('sys_user');
      if (delUsr.get('user_name', 'gsft.security.audit')) {
         delUsr.setWorkflow(false);
         delUsr.deleteRecord();
      }
   },
   
   _auditUsers : function() {
      for (var u = 0; u < this.users.length; u++)
         this._audit(this.users[u], '', true);
   },
   
   _audit : function(user, role, realUser) {
      var cs = '';
      var css = '';
      var field = '';
      var fieldName = '';
      var fields = '';
      var script = '';
      
      //Set the current role for the "gsft.security.audit" temp user
      if (role)
         this._setSecurityAuditRole(role);
      
      var session = gs.getSession();
      if (user)
         var origUser = session.impersonate(user);
      
      try {
         var tbl = new GlideRecord('sys_dictionary');
         tbl.addQuery('element', '');
         if (this.set.field_level)
            tbl.addQuery('name', this.set.table);
         
         tbl.query();
         while (tbl.next()) {
            var gr = new GlideRecord(tbl.name);
            // Get Field level results
            if (this.set.field_level) {
               gr.initialize();
               fields = gr.getFields();
               for (var i = 0; i < fields.size(); i++) {
                  field = fields.get(i);
                  this._getOperationResults(field, tbl.name, role, user, realUser, field.getName().toString());
               }
            }
            // Get Table level results
            this._getOperationResults(gr, tbl.name, role, user, realUser, '');
         }
      } catch (e) {
      	gs.logError("Error: " + e, "SecurityAuditor");
      } finally {
         session.impersonate(origUser);
      }
   },
   
   _getOperationResults : function(item, tableName, role, user, realUser, fieldName) {
      this.canRead = item.canRead() ? 'Yes' : 'No';
      this.canWrite = item.canWrite() ? 'Yes' : 'No';
      this.canCreate = item.canCreate() ? 'Yes' : 'No';
      this.canDelete = item.canDelete() ? 'Yes' : 'No';
      if (!JSUtil.nil(fieldName))
      	this.canDelete = "N/A";
      	
      cs = new GlideRecord('sys_security_acl');
      if (fieldName)
         cs.addQuery('name', tableName + '.' + fieldName).addOrCondition('name', tableName + '.*');
      else
         cs.addQuery('name', tableName);
      cs.query();
      while (cs.next()) {
         var op = cs.operation.name.toLowerCase();
         if (cs.condition) 
            this._setOperationResults(op);
         else {
            //Ignore scripts that just have true, false, or hasRole in them.
            script = trim(cs.script).replace(/ /g, '').replace(/answer=/g, '').replace(/;/g, '').replace(/gs\.hasRole\(('|").*?('|")\)/g, 'hasRole');
            if (script && script != 'true' && script != 'false' && script != 'hasRole')
               this._setOperationResults(op);
         }
      }
      this._createSecurityLines(tableName, role, user, realUser, fieldName);
   },
   
   _setOperationResults : function(operation) {
      switch (operation) {
         case "read" :
         this.canRead = 'Maybe';
         break;
         case "write" :
         this.canWrite = 'Maybe';
         break;
         case "create" :
         this.canCreate = 'Maybe';
         break;
         case "delete" :
         this.canDelete = 'Maybe';
         break;
         default :
         break;
      }
   },
   
   _createSecurityLines : function(tableName, role, user, realUser, fieldName) {
      var secLine = new GlideRecord('security_audit_line');
      secLine.addQuery('set', this.set.sys_id);
      secLine.addQuery('table', tableName);
      secLine.addQuery('role', role);
      if (fieldName)
         secLine.addQuery('field', fieldName);
      
      if (realUser)
         secLine.addQuery('user', user);
      
      secLine.query();
      if (!secLine.next())
         secLine.initialize();
      
      secLine.set = this.set.sys_id;
      secLine.table = tableName;
      secLine.role = role;
      secLine.user = user;
      secLine.field = fieldName;
      secLine.can_read = this.canRead;
      secLine.can_write = this.canWrite;
      secLine.can_create = this.canCreate;
      secLine.can_delete = this.canDelete;
      secLine.accessible = true;
      if (secLine.can_read == 'No' && secLine.can_write == 'No' && secLine.can_create == 'No' && secLine.can_delete == 'No')
         secLine.accessible = false;
      secLine.update();
   },
   
   // Ensure the gsft.security.audit user does not have any existing roles
   // expect the one we are looking for
   _setSecurityAuditRole : function(role) {
      var foundRole = false;
      var ur = new GlideRecord('sys_user_has_role');
      ur.addQuery('user.user_name', 'gsft.security.audit');
      ur.query();
      while (ur.next()) {
         if (ur.role != role)
            ur.deleteRecord();
         
         if (ur.role == role)
            foundRole = true;
      }
      
      if (!foundRole && role) {
         ur.initialize();
         ur.user = 'gsft.security.audit';
         ur.role = role;
         ur.insert();
      }
   }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>christen.mitchell</sys_created_by>
        <sys_created_on>2011-05-20 21:12:04</sys_created_on>
        <sys_id>8968dc45ff320000dadad1cb127f9d5f</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>SecurityAuditor</sys_name>
        <sys_package display_value="AppSanErrors" source="x_appsanerrors">5a44a9272c233300964f09ed930d10c2</sys_package>
        <sys_policy/>
        <sys_scope display_value="AppSanErrors">5a44a9272c233300964f09ed930d10c2</sys_scope>
        <sys_update_name>sys_script_include_8968dc45ff320000dadad1cb127f9d5f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2011-11-10 21:04:27</sys_updated_on>
    </sys_script_include>
</record_update>
