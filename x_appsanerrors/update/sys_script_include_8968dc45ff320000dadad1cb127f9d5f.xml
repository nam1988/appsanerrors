<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
  <sys_script_include action="INSERT_OR_UPDATE">
    <active>true</active>
    <client_callable>false</client_callable>
    <description>Runs an audit of Contextual Security ACL's for specified Users / Roles / ESS of a specified table and/or table and fields</description>
    <name>SecurityAuditor</name>
    <script>var SecurityAuditor = Class.create();&#13;
&#13;
SecurityAuditor.prototype = {&#13;
   initialize : function(set) {&#13;
      this.set = set;&#13;
      this.ess = set.ess;&#13;
      this.roles = set.roles.split(',');&#13;
      this.users = set.users.split(',');&#13;
      this.canRead = "";&#13;
      this.canWrite = "";&#13;
      this.canCreate = "";&#13;
      this.canDelete = "";&#13;
      &#13;
      if (this.ess || this.roles)&#13;
         this._auditRoles();&#13;
      &#13;
      if (this.users)&#13;
         this._auditUsers();&#13;
      &#13;
      set.state = 3;&#13;
      set.update();&#13;
   },&#13;
   &#13;
   _auditRoles : function() {&#13;
      // Create a temp gsft.security.audit user to verify roles&#13;
      var usr = new GlideRecord('sys_user');&#13;
      if (!usr.get('user_name', 'gsft.security.audit')) {&#13;
         usr.user_name = 'gsft.security.audit';&#13;
         usr.setWorkflow(false);&#13;
         usr.insert();&#13;
      }&#13;
      &#13;
      if (this.ess)&#13;
         this._audit(usr.sys_id, '', false);&#13;
      &#13;
      if (this.roles) {&#13;
         for (var i = 0; i &lt; this.roles.length; i++)&#13;
            this._audit(usr.sys_id, this.roles[i], false);&#13;
      }&#13;
      &#13;
      // Remove the temp gsft.security.audit user on the way out	&#13;
      var delUsr = new GlideRecord('sys_user');&#13;
      if (delUsr.get('user_name', 'gsft.security.audit')) {&#13;
         delUsr.setWorkflow(false);&#13;
         delUsr.deleteRecord();&#13;
      }&#13;
   },&#13;
   &#13;
   _auditUsers : function() {&#13;
      for (var u = 0; u &lt; this.users.length; u++)&#13;
         this._audit(this.users[u], '', true);&#13;
   },&#13;
   &#13;
   _audit : function(user, role, realUser) {&#13;
      var cs = '';&#13;
      var css = '';&#13;
      var field = '';&#13;
      var fieldName = '';&#13;
      var fields = '';&#13;
      var script = '';&#13;
      &#13;
      //Set the current role for the "gsft.security.audit" temp user&#13;
      if (role)&#13;
         this._setSecurityAuditRole(role);&#13;
      &#13;
      var session = gs.getSession();&#13;
      if (user)&#13;
         var origUser = session.impersonate(user);&#13;
      &#13;
      try {&#13;
         var tbl = new GlideRecord('sys_dictionary');&#13;
         tbl.addQuery('element', '');&#13;
         if (this.set.field_level)&#13;
            tbl.addQuery('name', this.set.table);&#13;
         &#13;
         tbl.query();&#13;
         while (tbl.next()) {&#13;
            var gr = new GlideRecord(tbl.name);&#13;
            // Get Field level results&#13;
            if (this.set.field_level) {&#13;
               gr.initialize();&#13;
               fields = gr.getFields();&#13;
               for (var i = 0; i &lt; fields.size(); i++) {&#13;
                  field = fields.get(i);&#13;
                  this._getOperationResults(field, tbl.name, role, user, realUser, field.getName().toString());&#13;
               }&#13;
            }&#13;
            // Get Table level results&#13;
            this._getOperationResults(gr, tbl.name, role, user, realUser, '');&#13;
         }&#13;
      } catch (e) {&#13;
      	gs.logError("Error: " + e, "SecurityAuditor");&#13;
      } finally {&#13;
         session.impersonate(origUser);&#13;
      }&#13;
   },&#13;
   &#13;
   _getOperationResults : function(item, tableName, role, user, realUser, fieldName) {&#13;
      this.canRead = item.canRead() ? 'Yes' : 'No';&#13;
      this.canWrite = item.canWrite() ? 'Yes' : 'No';&#13;
      this.canCreate = item.canCreate() ? 'Yes' : 'No';&#13;
      this.canDelete = item.canDelete() ? 'Yes' : 'No';&#13;
      if (!JSUtil.nil(fieldName))&#13;
      	this.canDelete = "N/A";&#13;
      	&#13;
      cs = new GlideRecord('sys_security_acl');&#13;
      if (fieldName)&#13;
         cs.addQuery('name', tableName + '.' + fieldName).addOrCondition('name', tableName + '.*');&#13;
      else&#13;
         cs.addQuery('name', tableName);&#13;
      cs.query();&#13;
      while (cs.next()) {&#13;
         var op = cs.operation.name.toLowerCase();&#13;
         if (cs.condition) &#13;
            this._setOperationResults(op);&#13;
         else {&#13;
            //Ignore scripts that just have true, false, or hasRole in them.&#13;
            script = trim(cs.script).replace(/ /g, '').replace(/answer=/g, '').replace(/;/g, '').replace(/gs\.hasRole\(('|").*?('|")\)/g, 'hasRole');&#13;
            if (script &amp;&amp; script != 'true' &amp;&amp; script != 'false' &amp;&amp; script != 'hasRole')&#13;
               this._setOperationResults(op);&#13;
         }&#13;
      }&#13;
      this._createSecurityLines(tableName, role, user, realUser, fieldName);&#13;
   },&#13;
   &#13;
   _setOperationResults : function(operation) {&#13;
      switch (operation) {&#13;
         case "read" :&#13;
         this.canRead = 'Maybe';&#13;
         break;&#13;
         case "write" :&#13;
         this.canWrite = 'Maybe';&#13;
         break;&#13;
         case "create" :&#13;
         this.canCreate = 'Maybe';&#13;
         break;&#13;
         case "delete" :&#13;
         this.canDelete = 'Maybe';&#13;
         break;&#13;
         default :&#13;
         break;&#13;
      }&#13;
   },&#13;
   &#13;
   _createSecurityLines : function(tableName, role, user, realUser, fieldName) {&#13;
      var secLine = new GlideRecord('security_audit_line');&#13;
      secLine.addQuery('set', this.set.sys_id);&#13;
      secLine.addQuery('table', tableName);&#13;
      secLine.addQuery('role', role);&#13;
      if (fieldName)&#13;
         secLine.addQuery('field', fieldName);&#13;
      &#13;
      if (realUser)&#13;
         secLine.addQuery('user', user);&#13;
      &#13;
      secLine.query();&#13;
      if (!secLine.next())&#13;
         secLine.initialize();&#13;
      &#13;
      secLine.set = this.set.sys_id;&#13;
      secLine.table = tableName;&#13;
      secLine.role = role;&#13;
      secLine.user = user;&#13;
      secLine.field = fieldName;&#13;
      secLine.can_read = this.canRead;&#13;
      secLine.can_write = this.canWrite;&#13;
      secLine.can_create = this.canCreate;&#13;
      secLine.can_delete = this.canDelete;&#13;
      secLine.accessible = true;&#13;
      if (secLine.can_read == 'No' &amp;&amp; secLine.can_write == 'No' &amp;&amp; secLine.can_create == 'No' &amp;&amp; secLine.can_delete == 'No')&#13;
         secLine.accessible = false;&#13;
      secLine.update();&#13;
   },&#13;
   &#13;
   // Ensure the gsft.security.audit user does not have any existing roles&#13;
   // expect the one we are looking for&#13;
   _setSecurityAuditRole : function(role) {&#13;
      var foundRole = false;&#13;
      var ur = new GlideRecord('sys_user_has_role');&#13;
      ur.addQuery('user.user_name', 'gsft.security.audit');&#13;
      ur.query();&#13;
      while (ur.next()) {&#13;
         if (ur.role != role)&#13;
            ur.deleteRecord();&#13;
         &#13;
         if (ur.role == role)&#13;
            foundRole = true;&#13;
      }&#13;
      &#13;
      if (!foundRole &amp;&amp; role) {&#13;
         ur.initialize();&#13;
         ur.user = 'gsft.security.audit';&#13;
         ur.role = role;&#13;
         ur.insert();&#13;
      }&#13;
   }&#13;
};</script>
    <sys_created_by>christen.mitchell</sys_created_by>
    <sys_created_on>2011-05-20 21:12:04</sys_created_on>
    <sys_id>8968dc45ff320000dadad1cb127f9d5f</sys_id>
    <sys_mod_count>6</sys_mod_count>
    <sys_updated_by>admin</sys_updated_by>
    <sys_updated_on>2011-11-10 21:04:27</sys_updated_on>
  </sys_script_include>
</record_update>
